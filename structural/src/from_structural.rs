/// For conversions between structural types.
///
/// # Example
///
/// This example demonstrates how this trait can be manually implemented.
///
/// ```rust
/// use structural::{FromStructural, StructuralExt, Structural, fp, make_struct};
///
/// {
///     let this = Point{x: 33, y:45};
///     assert_eq!(this.into_struc::<Entity>(), Entity{x: 33, y: 45, health: 100});
/// }
/// {
///     let this = make_struct!{x: 100, y: 200, foo: "hello"};
///     assert_eq!(this.into_struc::<Entity>(), Entity{x: 100, y: 200, health: 100});
/// }
/// {
///     // The `Point_SI` trait was generated by the Structural derive on `Point`,
///     // aliasing it's accessor trait impls.
///     let this: Box<dyn Point_SI<u32>> = Box::new(Point{x: 2016, y: 2080});
///     assert_eq!(this.into_struc::<Entity>(), Entity{x: 2016, y: 2080, health: 100});
/// }
///
/// #[derive(Structural)]
/// struct Point<T>{
///     pub x: T,
///     pub y: u32,
/// }
///
/// #[derive(Debug,PartialEq,Structural)]
/// struct Entity{
///     #[struc(public)]
///     x: u32,
///
///     #[struc(public)]
///     y: u32,
///
///     health: u32,
/// }
///
/// impl<T> FromStructural<T> for Entity
/// where
///     T: Entity_SI
/// {
///     fn from_structural(from: T)->Self {
///         let (x, y) = from.into_fields(fp!(x, y));
///         Entity{ x, y, health: 100 }
///     }
/// }
/// ```
///
pub trait FromStructural<T>: Sized {
    fn from_structural(from: T) -> Self;
}

/// For conversions between structural types.
///
/// This trait has a blanket implementations for all types that implement FromStructural.
pub trait IntoStructural<T>: Sized {
    fn into_structural(self) -> T;
}

impl<This, T> IntoStructural<T> for This
where
    T: FromStructural<This>,
{
    fn into_structural(self) -> T {
        T::from_structural(self)
    }
}
