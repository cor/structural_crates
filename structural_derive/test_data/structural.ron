(
  cases:[
    (
      name:"access attribute",
      code:r##"
        #[struc(access="#replaced")]
        struct Huh{
            pub a:u32,
        }
      "##,
      subcase: [
        ( replacements: { "#replaced":"ooh" }, error_count: 1 ),
        ( replacements: { "#replaced":"ref" }, error_count: 0 ),
        ( replacements: { "#replaced":"mut" }, error_count: 0 ),
        ( replacements: { "#replaced":"move" }, error_count: 0 ),
      ],
    ),
    (
      name:"replace bounds struct",
      code:r##"
        #[struc(#0)]
        struct Huh{
            #[struc(#1)]
            pub a:u32,
        }
      "##,
      subcase: [
        ( replacements: { "#0":"replace_bounds=\"Trait\"", "#1":"", }, error_count: 1 ),
        ( replacements: { "#0":"", "#1":"replace_bounds=\"Trait\"", }, error_count: 1 ),
      ],
    ),
    (
      name:"delegate_to",
      code:r##"
        struct Huh<T,U>{
            #[struc(#r0)]
            pub a:T,
            #[struc(#r1)]
            pub b:U,
        }
      "##,
      subcase: [
        ( replacements: { "#r0":"", "#r1":"" }, error_count: 0 ),
        ( replacements: { "#r0":"delegate_to", "#r1":"" }, error_count: 0 ),
        ( replacements: { "#r0":"", "#r1":"delegate_to" }, error_count: 0 ),
        (
          replacements: { "#r0":"delegate_to", "#r1":"delegate_to" }, 
          find_all:[regex("Cannot.*delegate_to.*field")], 
          error_count: 1
        ),
      ],
    ),
    (
      name:"rename attribute",
      code:r##"
        pub struct Huh{
            #[struc(rename="#replaced")]
            pub original:u32,
        }
      "##,
      subcase: [
        (
          replacements: { "#replaced":"hello" },
          find_all:[regex("hello *: *u32"),regex("original *: *u32")], 
          error_count: 0,
        ),
        (
          replacements: { "#replaced":"world" },
          find_all:[regex("world *: *u32"),regex("original *: *u32")], 
          error_count: 0,
        ),
        (
          replacements: { "#replaced":"0" },
          find_all:[regex("0 *: *u32"),regex("original *: *u32")], 
          error_count: 0,
        ),
      ],
    ),
    (
      name:"valid_path_attributes",
      code:r##"
        #[struc(#replaced)]
        struct Huh{
            pub a:u32,
        }
      "##,
      subcase: [
        ( replacements: { "#replaced":"ooh" }, error_count: 1 ),
        ( replacements: { "#replaced":"yeah" }, error_count: 1 ),
        ( replacements: { "#replaced":"public" }, error_count: 0 ),
        ( replacements: { "#replaced":"not_public" }, error_count: 0 ),
        ( replacements: { "#replaced":"private" }, error_count: 0 ),
      ],
    ),
    (
      name:"variant_path_attribute",
      code:r##"
        pub enum Huh{
            #[struc(#f)]
            Foo,
        }
      "##,
      subcase: [
        ( replacements: { "#f":"" }, error_count: 0 ),
        ( 
          replacements: { "#f":"not_public" },
          error_count: 1,
          find_all: [str("unrecognized attribute")],
        ),
      ],
    ),
    (
      // This test checks that,if a field is private,
      // that accessor trait impls aren't generated.
      //
      // If private fields start being outputted from the derive macro,
      // this'll have to change.
      name:"single field and accessors",
      code:r##"
        struct Huh{
          #p0 hello:u32,
          pub world:u64,
          #p0 dino:String,
        }
      "##,
      subcase: [
        ( 
          replacements: { "#p0":"" },
          find_all:[not(regex("hello.*u32")),str("world"),not(regex("dino.*String"))],
          error_count: 0,
        ),
        ( 
          replacements: { "#p0":"pub " },
          find_all:[str("hello"),str("world"),str("dino")],
          error_count: 0,
        ),
        ( 
          replacements: { "#p0":"#[struc(public)]" },
          find_all:[str("hello"),str("world"),str("dino")],
          error_count: 0,
        ),
      ],
    ),
    (
      name:"variant count alias struct",
      code:r##"
        #[struc(variant_count_alias)]
        struct Huh;
      "##,
      subcase: [
        ( replacements: {}, error_count: 1 ),
      ],
    ),
    (
      name:"variant count alias enum",
      code:r##"
        #[struc(variant_count_alias)]
        #vis enum Enum{
          Foo
        }
      "##,
      subcase: [
        (
          replacements: { "#vis":"pub" },
          find_all:[regex(r#"pub +type *Enum_VC"#)],
          error_count: 0,
        ),
        (
          replacements: { "#vis":"pub(self)" },
          find_all:[regex(r#"pub *\( *self *\) *type *Enum_VC"#)],
          error_count: 0,
        ),
      ],
    ),
    (
      name:"no_docs-0",
      code:r##"
        #[struc(#0)]
        #v struct Hello{
            pub a:u32,
            pub b:u32,
            #[struc(rename="c")]
            pub ee:u32,
        }
      "##,
      subcase: [
        (
          replacements: { "#0":"no_docs", "#v":"pub" },
          find_all:[
            not(regex(r#"FP *! *\( *a *\) *, *Ty *= *u32"#)),
            not(regex(r#"FP *! *\( *b *\) *, *Ty *= *u32"#)),
            not(regex(r#"FP *! *\( *\\"c\\" *\) *, *Ty *= *u32"#)),
            not(regex(r#"///"#)),
          ],
          error_count: 0,
        ),
        (
          replacements: { "#0":"", "#v":"pub(crate)" },
          find_all:[
            not(regex(r#"FP *! *\( *a *\) *, *Ty *= *u32"#)),
            not(regex(r#"FP *! *\( *b *\) *, *Ty *= *u32"#)),
            not(regex(r#"FP *! *\( *\\"c\\" *\) *, *Ty *= *u32"#)),
          ],
          error_count: 0,
        ),
        (
          replacements: { "#0":"", "#v":"pub" },
          find_all:[
            regex(r#"FP *! *\( *a *\) *, *Ty *= *u32"#),
            regex(r#"FP *! *\( *b *\) *, *Ty *= *u32"#),
            regex(r#"FP *! *\( *\\"c\\" *\) *, *Ty *= *u32"#),
            regex(r#"named `ee` in"#),
          ],
          error_count: 0,
        ),
      ],
    ),
    (
      name:"no_docs-1",
      code:r##"
        #[struc(#0)]
        #v struct Hello{
            pub a:u32,
            pub b:u32,
            pub c:u32,
        }
      "##,
      subcase: [
        (
          replacements: { "#0":"", "#v":"pub(crate)" },
          find_all:[
            not(regex(r#"FP *! *\( *a *\) *, *Ty *= *u32"#)),
            not(regex(r#"FP *! *\( *b *\) *, *Ty *= *u32"#)),
            not(regex(r#"FP *! *\( *c *\) *, *Ty *= *u32"#)),
          ],
          error_count: 0,
        ),
      ],
    ),
    (
      name:"no_docs-2",
      code:r##"
        #[derive(Structural)]
        #A
        pub enum NonExhaustiveEnum {
            A,
            B,
        }
      "##,
      subcase: [
        (
          replacements: { "#A":"" },
          find_all:[
            regex("pub *trait *NonExhaustiveEnum_ESI"),
            regex("pub *trait *NonExhaustiveEnum_SI"),
          ],
          error_count: 0,
        ),
        (
          replacements: { "#A":"#[non_exhaustive]" },
          find_all:[
            not(str("NonExhaustiveEnum_ESI")),
            not(str("VariantCount")),
            regex("pub *trait *NonExhaustiveEnum_SI"),
          ],
          error_count: 0,
        ),
        (
          replacements: { "#A":"#[non_exhaustive] #[struc(variant_count_alias)]" },
          find_all:[
            regex("attribute.*on.*non_exhaustive"),
          ],
          error_count: 1,
        ),
      ],
    ),
    (
      name:"too many fields struct",
      code:r##"
        #[derive(Structural)]
        #[struc(public)]
        pub struct Struct {
          f00:(),f01:(),f02:(),f03:(),f04:(),f05:(),f06:(),f07:(),f08:(),f09:(),
          f10:(),f11:(),f12:(),f13:(),f14:(),f15:(),f16:(),f17:(),f18:(),f19:(),
          f20:(),f21:(),f22:(),f23:(),f24:(),f25:(),f26:(),f27:(),f28:(),f29:(),
          f30:(),f31:(),f32:(),f33:(),f34:(),f35:(),f36:(),f37:(),f38:(),f39:(),
          #f
          f40:(),f41:(),f42:(),f43:(),f44:(),f45:(),f46:(),f47:(),f48:(),f49:(),
          f50:(),f51:(),f52:(),f53:(),f54:(),f55:(),f56:(),f57:(),f58:(),f59:(),
          f60:(),f61:(),f62:(),f63:(),
        }
      "##,
      subcase: [
        (
          replacements: { "#f":"" },
          find_all:[],
          error_count: 0,
        ),
        (
          replacements: { "#f":"#[struc(not_public)] f64:()," },
          find_all:[],
          error_count: 0,
        ),
        (
          replacements: { "#f":"f64:()," },
          find_all:[str("64 fields")],
          error_count: 1,
        ),
      ]
    ),
    (
      name:"too many fields enum",
      code:r##"
        #[derive(Structural)]
        pub enum Enum {
          Variant{
            f00:(),f01:(),f02:(),f03:(),f04:(),f05:(),f06:(),f07:(),f08:(),f09:(),
            f10:(),f11:(),f12:(),f13:(),f14:(),f15:(),f16:(),f17:(),f18:(),f19:(),
            f20:(),f21:(),f22:(),f23:(),f24:(),f25:(),f26:(),f27:(),f28:(),f29:(),
            f30:(),f31:(),f32:(),f33:(),f34:(),f35:(),f36:(),f37:(),f38:(),f39:(),
            #f
            f40:(),f41:(),f42:(),f43:(),f44:(),f45:(),f46:(),f47:(),f48:(),f49:(),
            f50:(),f51:(),f52:(),f53:(),f54:(),f55:(),f56:(),f57:(),f58:(),f59:(),
            f60:(),f61:(),f62:(),f63:(),
          }
        }
      "##,
      subcase: [
        (
          replacements: { "#f":"" },
          find_all:[],
          error_count: 0,
        ),
        (
          replacements: { "#f":"#[struc(not_public)] f64:()," },
          find_all:[],
          error_count: 0,
        ),
        (
          replacements: { "#f":"f64:()," },
          find_all:[str("64 fields")],
          error_count: 1,
        ),
      ]
    ),
    (
      name:"pre_move twice",
      code:r##"
        #[struc(
          pre_move="foo",
          #f
        )]
        struct Huh{}
      "##,
      subcase: [
        ( replacements: { "#f":"" }, error_count: 0 ),
        ( replacements: { "#f":r##"pre_move="bar""## }, error_count: 1 ),
      ],
    ),
  ]
)
